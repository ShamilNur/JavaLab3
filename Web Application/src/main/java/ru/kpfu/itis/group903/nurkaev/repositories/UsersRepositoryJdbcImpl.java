package ru.kpfu.itis.group903.nurkaev.repositories;

import ru.kpfu.itis.group903.nurkaev.forms.UserForm;
import ru.kpfu.itis.group903.nurkaev.models.User;
import ru.kpfu.itis.group903.nurkaev.models.UserSecond;

import javax.sql.DataSource;
import java.sql.*;
import java.util.List;
import java.util.Optional;

/**
 * @author Shamil Nurkaev @nshamil
 * 11-903
 * Homework
 */

public class UsersRepositoryJdbcImpl implements UsersRepository {

    // language=SQL
    private static final String SQL_SELECT = "SELECT * FROM student";

    // language=SQL
    private static final String SQL_SELECT_BY_ID = "SELECT * FROM student WHERE id = ?";

    // language=SQL
    private static final String SQL_SELECT_BY_AGE = "SELECT * FROM student WHERE age = ?";

    // language=SQL
    private static final String SQL_INSERT = "INSERT INTO student (first_name, last_name, age) VALUES (?, ?, ?)";


    // language=SQL
    private static final String SQL_UPDATE_BY_ID = "UPDATE student SET first_name = ?, last_name = ?, age = ? WHERE id = ?";

    // language=SQL
    private static final String SQL_DELETE_BY_ID = "DELETE FROM student WHERE id = ?";

    // language=SQL
    private static final String SQL_INSERT_USER_SECOND = "INSERT INTO user_second (first_name, last_name, email, password, uuid) VALUES (?, ?, ?, ?, ?)";

    //language=SQL
    private static final String SQL_SELECT_USER_BY_EMAIL = "SELECT * FROM user_second WHERE email = ?";

    private final DataSource dataSource;

    private final SimpleJdbcTemplate template;

    private final RowMapper<User> userRowMapper = row -> User.builder()
            .id(row.getLong("id"))
            .firstName(row.getString("first_name"))
            .lastName(row.getString("last_name"))
            .age(row.getInt("age"))
            .build();

    private final RowMapper<UserSecond> userSecondRowMapper = row -> UserSecond.builder()
            .id(row.getLong("id"))
            .firstName(row.getString("first_name"))
            .lastName(row.getString("last_name"))
            .email(row.getString("email"))
            .password(row.getString("password"))
            .uuid(row.getString("uuid"))
            .build();

    public UsersRepositoryJdbcImpl(DataSource dataSource) {
        this.dataSource = dataSource;
        this.template = new SimpleJdbcTemplate(dataSource);
    }

    @Override
    public void save(User entity) {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS)) {

            int position = 1;
            preparedStatement.setString(position++, entity.getFirstName());
            preparedStatement.setString(position++, entity.getLastName());
            preparedStatement.setInt(position, entity.getAge());

            preparedStatement.executeUpdate();

            // setting the ID value generated by the database
            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
                resultSet.next();
                Long id = resultSet.getLong(1);
                entity.setId(id);
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }

    @Override
    public void update(User entity) {
        template.update(SQL_UPDATE_BY_ID, userRowMapper, entity.getFirstName(), entity.getLastName(), entity.getAge(), entity.getId());
    }

    @Override
    public void delete(User entity) {
        template.update(SQL_DELETE_BY_ID, userRowMapper, entity.getId());
    }

    @Override
    public Optional<User> findById(Long id) {
        // this query will return list with only one user.
        // findAny returns this user.
        return template.queryForList(SQL_SELECT_BY_ID, userRowMapper, id).stream().findAny();
    }

    @Override
    public List<User> findAll() {
        return template.queryForList(SQL_SELECT, userRowMapper);
    }

    @Override
    public List<User> findAllByAge(Integer age) {
        return template.queryForList(SQL_SELECT_BY_AGE, userRowMapper, age);
    }

    @Override
    public void signUp(UserForm userForm) {
        UserSecond userSecond = UserSecond.builder()
                .firstName(userForm.getFirstName())
                .lastName(userForm.getLastName())
                .email(userForm.getEmail())
                .password(userForm.getPassword())
                .uuid(userForm.getUuid())
                .build();

        UsersRepository usersRepository = new UsersRepositoryJdbcImpl(dataSource);
        usersRepository.save(userSecond);
    }

    @Override
    public void save(UserSecond entity) {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(SQL_INSERT_USER_SECOND, Statement.RETURN_GENERATED_KEYS)) {

            int position = 1;
            preparedStatement.setString(position++, entity.getFirstName());
            preparedStatement.setString(position++, entity.getLastName());
            preparedStatement.setString(position++, entity.getEmail());
            preparedStatement.setString(position++, entity.getPassword());
            preparedStatement.setString(position, entity.getUuid());

            preparedStatement.executeUpdate();

            // setting the ID value generated by the database
            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
                resultSet.next();
                Long id = resultSet.getLong(1);
                entity.setId(id);
            }
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }

    @Override
    public Optional<UserSecond> findOneByEmail(String email) {
        return template.queryForList(SQL_SELECT_USER_BY_EMAIL, userSecondRowMapper, email).stream().findAny();
    }
}
